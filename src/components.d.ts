/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FwButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the button on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false.
         */
        "expand": boolean;
        /**
          * Accepts the id of the fw-modal component to open it on click
         */
        "modalTriggerId": string;
        /**
          * Size of the button.
         */
        "size": 'normal' | 'mini' | 'small';
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
         */
        "throttleDelay": number;
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type": 'button' | 'reset' | 'submit';
    }
    interface FwCheckbox {
        /**
          * Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Label displayed on the interface, for the check box.
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
    }
}
declare global {
    interface HTMLFwButtonElement extends Components.FwButton, HTMLStencilElement {
    }
    var HTMLFwButtonElement: {
        prototype: HTMLFwButtonElement;
        new (): HTMLFwButtonElement;
    };
    interface HTMLFwCheckboxElement extends Components.FwCheckbox, HTMLStencilElement {
    }
    var HTMLFwCheckboxElement: {
        prototype: HTMLFwCheckboxElement;
        new (): HTMLFwCheckboxElement;
    };
    interface HTMLElementTagNameMap {
        "fw-button": HTMLFwButtonElement;
        "fw-checkbox": HTMLFwCheckboxElement;
    }
}
declare namespace LocalJSX {
    interface FwButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the button on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false.
         */
        "expand"?: boolean;
        /**
          * Accepts the id of the fw-modal component to open it on click
         */
        "modalTriggerId"?: string;
        /**
          * Triggered when the button loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the button is clicked.
         */
        "onFwClick"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the button comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Size of the button.
         */
        "size"?: 'normal' | 'mini' | 'small';
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
         */
        "throttleDelay"?: number;
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type"?: 'button' | 'reset' | 'submit';
    }
    interface FwCheckbox {
        /**
          * Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Label displayed on the interface, for the check box.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the check box loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the check box’s value is modified.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the check box comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "fw-button": FwButton;
        "fw-checkbox": FwCheckbox;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fw-button": LocalJSX.FwButton & JSXBase.HTMLAttributes<HTMLFwButtonElement>;
            "fw-checkbox": LocalJSX.FwCheckbox & JSXBase.HTMLAttributes<HTMLFwCheckboxElement>;
        }
    }
}
